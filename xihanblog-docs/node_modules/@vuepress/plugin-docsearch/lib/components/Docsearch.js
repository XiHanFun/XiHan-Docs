import { createElement } from 'preact';
import { defineComponent, getCurrentInstance, h, onMounted, watch } from 'vue';
import { useRouter } from 'vue-router';
import { useSiteData } from '@vuepress/client';
import { resolveRoutePathFromUrl } from '@vuepress/shared';
import '@docsearch/css';
const loadDocsearch = async () => {
    // @ts-ignore: docsearch types issue
    const docsearch = await import('@docsearch/js');
    return docsearch.default;
};
const isSpecialClick = (event) => {
    return (event.button === 1 ||
        event.altKey ||
        event.ctrlKey ||
        event.metaKey ||
        event.shiftKey);
};
export const Docsearch = defineComponent({
    name: 'Docsearch',
    props: {
        options: {
            type: Object,
            required: true,
        },
    },
    setup(props) {
        const router = useRouter();
        const site = useSiteData();
        const vm = getCurrentInstance();
        const initialize = (options) => {
            loadDocsearch().then((docsearch) => {
                docsearch({
                    ...options,
                    // the container selector
                    container: '#docsearch',
                    // navigation behavior triggered by `onKeyDown` internally
                    // @ts-ignore: docsearch types issue
                    navigator: {
                        // when pressing Enter without metaKey
                        navigate: ({ itemUrl }) => {
                            router.push(itemUrl);
                        },
                    },
                    // transform full url to route path
                    transformItems: (items) => items.map((item) => {
                        // the `item.url` is full url with protocol and hostname
                        // so we have to transform it to vue-router path
                        return {
                            ...item,
                            url: resolveRoutePathFromUrl(item.url, site.value.base),
                        };
                    }),
                    // handle `onClick` by `router.push`
                    hitComponent: ({ hit, children }) => createElement('a', {
                        href: hit.url,
                        onClick: (event) => {
                            if (isSpecialClick(event)) {
                                return;
                            }
                            event.preventDefault();
                            router.push(hit.url);
                        },
                    }, children),
                });
            });
        };
        const update = (options) => {
            if (vm && vm.vnode.el) {
                vm.vnode.el.innerHTML = '<div id="docsearch"></div>';
                initialize(options);
            }
        };
        watch(() => props.options, (val, prevVal) => {
            // check if the options are modified
            const keys = Object.keys(val);
            const prevKeys = Object.keys(prevVal);
            if (keys.length !== prevKeys.length ||
                keys.some((key) => val[key] !== prevVal[key])) {
                update(val);
            }
        });
        onMounted(() => initialize(props.options));
        return () => h('div', { id: 'docsearch' });
    },
});
//# sourceMappingURL=Docsearch.js.map